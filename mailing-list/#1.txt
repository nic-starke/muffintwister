Muffin Update No. 1 - 5th December 2021
Tinkering

Firstly some historical information about the origins of the project. Muffin was originally started as a private project of mine, it was based on modifications to the original source code for the midi fighter twister (MFT), which is available here <https://github.com/DJ-TechTools/Midi_Fighter_Twister_Open_Source>.


After a few days of tinkering and exploring the original code base I had mostly understood the core/implementation, some areas were confusing due to the monolithic implementation, large chunks of commented out code between updates, and different coding styles.

First Iteration of Muffin

At this stage I decided to start from scratch and write my own firmware for the MFT - this would mean really getting to grips with the AVR XMega MCU and learning a lot along the way.


The first iteration started by using the same toolchain as the original developers - the official IDE from the vendor (Microchip Studio), and a set of drivers for the AVR MCU - Atmel Software Framework v4 (ASF). At this stage I had most of the functionality working except storage of user settings.


I was mostly happy but I did not feel I had learnt much yet. Using vendor supplied drivers for all the peripherals can be useful to get a prototype off the ground quickly, but I don't think you should be using it long term unless you have reviewed the source considerably and understand its weaknesses. So I decided to get away from the official vendor toolchain and get straight to the heart of the AVR - by using the AVR GNU compiler and standard library.


You may think "Why bother, why not just release patches to the original source code?"


Well, there are a few reasons for this, but the primary one that the original source code does not have a fully permissive license - you cannot release any modifications you have made. I have quoted a section of the license blurb from one of the source files below:


>
>
> Permission is hereby granted, free of charge, to any person owning or possessing
>  a DJ Tech-Tools MIDI Fighter Twister Hardware Device to view and modify this source
>  code for personal use. Person may not publish, distribute, sublicense, or sell
>  the source code (modified or un-modified). Person may not use this source code
>  or any diminutive works for commercial purposes.
>
>
>

So, releasing patches and modifications is/was a no go.

Second Iteration of Muffin

My only option was to start from scratch. In doing so I could write my own drivers for the AVR, write my own implementation for the midi controller (LEDs, encoders, switches.. etc), and release the entire thing open source under a permissive license.



I setup a new development environment within a virtual machine (using software called Vagrant). I then setup a meson build system for the project, and added a few shell scripts to handle setting up the environment variables, automatic formatting of the code, building the source, and flashing it to the MFT.
 Much of the development environment is inspired/based on the excellent setup by Emilie Gillet available here <https://github.com/pichenettes/mutable-dev-environment>, and the AVR build scripts by Zake Kemble available here <https://blog.zakkemble.net/avr-gcc-builds/>.



I have released this development environment as a seperate project which can be used as a generic AVR-GCC dev environment, available here <https://github.com/Nicolaus Starke/AVRGCC_DevelopmentEnvironment>.


Once I had the development environment configured I began to write drivers for the various peripherals, and also began to actually code the firmware for the controller itself.


So that is where I am at with the project currently - it has been slow to get to this point but progress should be swifter now that some of the more challenging aspects are dealt with.

Current Muffin Functionality

Basic display functions are working, turning off and on LEDs (no brightness/PWM yet).


Encoder and switch input processing is completed, including debouncing of switches, and handling encoder rotation.


The EEPROM is configured now and will write a set of default user settings if none are detected. This is an important part because any user that programs this firmware will probably already have the official DJTT MFT firmware. This means the eeprom has to be rewritten first prior to using it. So there are some checks in place to handle this.


A lot of work is done on the driver side, so most of the low-level code is written now and I can move on to the slightly more fun task of implementing functionality.


Thanks for reading. Another update to come soon (1-2 weeks).



Cheers,
Nic